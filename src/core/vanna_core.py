import pandas as pd
from dotenv import load_dotenv
import os
from src.database2.database_helpers import DB_CONFIG, get_column_name_and_description
from src.core.vanna_pre_post_process import preprocess_chain, postprocess_chain
from src.vanna_helpers.init_vanna import get_vanna
import time

load_dotenv(override=True)

def run_vanna_query(question):
    """Execute Vanna query and return results + visualization"""
    try:
        print("Start")
        # Pre-Process the question to get clear and suitable prompt
        # column_list = get_column_name_and_description(os.getenv("BALANCE_SHEET_EOP_TABLE_NAME"))
        # column_list_str = "\n".join(
        #     f"{i[0]}: {i[1]}"
        #     for i in column_list if i[1]
        # )
        # normalized_question = preprocess_chain.invoke({
        #     "question": question
        #     , "column_list": column_list_str
        # }).content
        # print("Normalized question: ", normalized_question)

        # time.sleep(2)

        vn = get_vanna()
        # sql, df, plot = vn.ask(normalized_question)
        sql, df, plot = vn.ask(question)
        # time.sleep(2)
        
        # Post-Process the answer with the data generated by VannaAI
        print("Before post process")
        # final_answer = postprocess_chain.invoke({
        #     "original_question": question
        #     , "normalized_question": normalized_question
        #     , "data": df.to_dict()
        # }).content

        final_answer = postprocess_chain.invoke({
            "original_question": question
            , "data": df.to_dict()
        }).content
        print("Final answer: ", final_answer)

        return sql, df, plot, final_answer
        
    except Exception as e:
        return f"SQL Error: {str(e)}", pd.DataFrame(), None, "No Answer"